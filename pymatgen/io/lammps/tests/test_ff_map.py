from __future__ import division, print_function, unicode_literals, \
    absolute_import

import os
import unittest
from collections import OrderedDict

from pymatgen.io.lammps.force_field import ForceField
from pymatgen.io.lammps.topology import Topology
from pymatgen.core.structure import Molecule

__author__ = 'Rishi Gurnani'
__email__ = 'rgurnani96@lbl.gov'

test_dir = os.path.join(os.path.dirname(__file__), "..", "..", "..", "..",
                        "test_files", "lammps")


class TestLammpsForceFieldData(unittest.TestCase):
    @classmethod
    def setUpClass(self):
        polymer_chain = Molecule.from_file(os.path.join(test_dir,"polymer_chain.xyz"))
        polymer_linear = Molecule.from_file(os.path.join(test_dir,"polymer_linear.xyz"))
        #cls.polymer_matrix = Molecule.from_file(os.path.join(test_dir,"polymer_matrix.xyz"))
        #cls.molecules = [polymer_chain] * 3
        #cls.mols_number = [7, 3, 1]
        #box_size = [[0.0, 50], [0.0, 50], [0.0, 50]]
        charges = [-0.1187, 0.0861, 0.0861, 0.0861, -0.2792, -0.0326, 0.0861,
                   0.0861, -0.0326, 0.0861, 0.0861, -0.2792, -0.0326, 0.0861,
                   0.0861, -0.0326, 0.0861, 0.0861, -0.2792, -0.0326, 0.0861,
                   0.0861, -0.0326, 0.0861, 0.0861, -0.2792, -0.0326, 0.0861,
                   0.0861, -0.0326, 0.0861, 0.0861, -0.2792, -0.0326, 0.0861,
                   0.0861, -0.0326, 0.0861, 0.0861, -0.2792, -0.0326, 0.0861,
                   0.0861, -0.0326, 0.0861, 0.0861, -0.2792, -0.1187, 0.0861,
                   0.0861, 0.0861]

        ff_map = ["C3", "H3", "H3", "H3", "O", "C2", "H2",
                   "H2", "C2", "H2", "H2", "O", "C2", "H2",
                   "H2", "C2", "H2", "H2", "O", "C2", "H2",
                   "H2", "C2", "H2", "H2", "O", "C2", "H2",
                   "H2", "C2", "H2", "H2", "O", "C2", "H2",
                   "H2", "C2", "H2", "H2", "O", "C2", "H2",
                   "H2", "C2", "H2", "H2", "O", "C3", "H3", "H3", "H3"]
        polymer_linear.add_site_property("charge", charges)
        polymer_linear.add_site_property("ff_map", ff_map)
        self.topology = Topology.from_molecule(polymer_linear)
        #cls.topologies = [topology] * len(cls.molecules)


        self.forcefield = ForceField.from_file(os.path.join(test_dir,"ffmap_data.yaml"))
        # #cls.lammps_ff_data_1 = LammpsForceFieldData.from_forcefield_and_topology(
        #     cls.molecules, cls.mols_number, box_size, cls.polymer_matrix,
        #     forcefield, cls.topologies)

    def test_ff_map(self):
        tatoms = [['C', 'C3'], ['H', 'H3'], ['H', 'H3'], ['H', 'H3'], ['O', 'O'],
                    ['C', 'C2'], ['H', 'H2'], ['H', 'H2'], ['C', 'C2'], ['H', 'H2'],
                    ['H', 'H2'], ['O', 'O'], ['C', 'C2'], ['H', 'H2'], ['H', 'H2'],
                    ['C', 'C2'], ['H', 'H2'], ['H', 'H2'], ['O', 'O'], ['C', 'C2'],
                    ['H', 'H2'], ['H', 'H2'], ['C', 'C2'], ['H', 'H2'], ['H', 'H2'],
                    ['O', 'O'], ['C', 'C2'], ['H', 'H2'], ['H', 'H2'], ['C', 'C2'],
                    ['H', 'H2'], ['H', 'H2'], ['O', 'O'], ['C', 'C2'], ['H', 'H2'],
                    ['H', 'H2'], ['C', 'C2'], ['H', 'H2'],['H', 'H2'], ['O', 'O'],
                    ['C', 'C2'], ['H', 'H2'], ['H', 'H2'], ['C', 'C2'], ['H', 'H2'],
                    ['H', 'H2'], ['O', 'O'], ['C', 'C3'], ['H', 'H3'], ['H', 'H3'],
                    ['H', 'H3']]


        tbonds = [[0, 1, ('C3', 'H3')], [0, 2, ('C3', 'H3')], [0, 3, ('C3', 'H3')],
                    [0, 4, ('C3', 'O')], [4, 5, ('O', 'C2')], [5, 6, ('C2', 'H2')],
                    [5, 7, ('C2', 'H2')], [5, 8, ('C2', 'C2')], [8, 9, ('C2', 'H2')],
                    [8, 10, ('C2', 'H2')], [8, 11, ('C2', 'O')], [11, 12, ('O', 'C2')],
                    [12, 13, ('C2', 'H2')], [12, 14, ('C2', 'H2')], [12, 15, ('C2', 'C2')],
                    [15, 16, ('C2', 'H2')], [15, 17, ('C2', 'H2')], [15, 18, ('C2', 'O')],
                    [18, 19, ('O', 'C2')], [19, 20, ('C2', 'H2')], [19, 21, ('C2', 'H2')],
                    [19, 22, ('C2', 'C2')], [22, 23, ('C2', 'H2')], [22, 24, ('C2', 'H2')],
                    [22, 25, ('C2', 'O')], [25, 26, ('O', 'C2')], [26, 27, ('C2', 'H2')],
                    [26, 28, ('C2', 'H2')], [26, 29, ('C2', 'C2')], [29, 30, ('C2', 'H2')],
                    [29, 31, ('C2', 'H2')], [29, 32, ('C2', 'O')], [32, 33, ('O', 'C2')],
                    [33, 34, ('C2', 'H2')], [33, 35, ('C2', 'H2')], [33, 36, ('C2', 'C2')],
                    [36, 37, ('C2', 'H2')], [36, 38, ('C2', 'H2')], [36, 39, ('C2', 'O')],
                    [39, 40, ('O', 'C2')], [40, 41, ('C2', 'H2')], [40, 42, ('C2', 'H2')],
                    [40, 43, ('C2', 'C2')], [43, 44, ('C2', 'H2')], [43, 45, ('C2', 'H2')],
                    [43, 46, ('C2', 'O')], [46, 47, ('O', 'C3')], [47, 48, ('C3', 'H3')],
                    [47, 49, ('C3', 'H3')], [47, 50, ('C3', 'H3')]]
        #pairs = OrderedDict([((u'C', u'C'), [-0.056, 2.01, -0.01, 1.9]),
        tangles = OrderedDict([(1, 0, 2, (u'H3', u'C3', u'H3'), [1, 0, 3, ('H3', 'C3', 'H3')]),
                    [1, 0, 4, ('H3', 'C3', 'O')], [2, 0, 3, ('H3', 'C3', 'H3')],
                    [2, 0, 4, ('H3', 'C3', 'O')], [3, 0, 4, ('H3', 'C3', 'O')],
                    [0, 4, 5, ('C3', 'O', 'C2')], [4, 5, 6, ('O', 'C2', 'H2')],
                    [4, 5, 7, ('O', 'C2', 'H2')], [4, 5, 8, ('O', 'C2', 'C2')],
                    [6, 5, 7, ('H2', 'C2', 'H2')], [6, 5, 8, ('H2', 'C2', 'C2')],
                    [7, 5, 8, ('H2', 'C2', 'C2')], [5, 8, 9, ('C2', 'C2', 'H2')],
                    [5, 8, 10, ('C2', 'C2', 'H2')], [5, 8, 11, ('C2', 'C2', 'O')],
                    [9, 8, 10, ('H2', 'C2', 'H2')], [9, 8, 11, ('H2', 'C2', 'O')],
                    [10, 8, 11, ('H2', 'C2', 'O')], [8, 11, 12, ('C2', 'O', 'C2')],
                    [11, 12, 13, ('O', 'C2', 'H2')], [11, 12, 14, ('O', 'C2', 'H2')],
                    [11, 12, 15, ('O', 'C2', 'C2')], [13, 12, 14, ('H2', 'C2', 'H2')],
                    [13, 12, 15, ('H2', 'C2', 'C2')], [14, 12, 15, ('H2', 'C2', 'C2')],
                    [12, 15, 16, ('C2', 'C2', 'H2')], [12, 15, 17, ('C2', 'C2', 'H2')],
                    [12, 15, 18, ('C2', 'C2', 'O')], [16, 15, 17, ('H2', 'C2', 'H2')],
                    [16, 15, 18, ('H2', 'C2', 'O')], [17, 15, 18, ('H2', 'C2', 'O')],
                    [15, 18, 19, ('C2', 'O', 'C2')], [18, 19, 20, ('O', 'C2', 'H2')],
                    [18, 19, 21, ('O', 'C2', 'H2')], [18, 19, 22, ('O', 'C2', 'C2')],
                    [20, 19, 21, ('H2', 'C2', 'H2')], [20, 19, 22, ('H2', 'C2', 'C2')],
                    [21, 19, 22, ('H2', 'C2', 'C2')], [19, 22, 23, ('C2', 'C2', 'H2')],
                    [19, 22, 24, ('C2', 'C2', 'H2')], [19, 22, 25, ('C2', 'C2', 'O')],
                    [23, 22, 24, ('H2', 'C2', 'H2')], [23, 22, 25, ('H2', 'C2', 'O')],
                    [24, 22, 25, ('H2', 'C2', 'O')], [22, 25, 26, ('C2', 'O', 'C2')],
                    [25, 26, 27, ('O', 'C2', 'H2')], [25, 26, 28, ('O', 'C2', 'H2')],
                    [25, 26, 29, ('O', 'C2', 'C2')], [27, 26, 28, ('H2', 'C2', 'H2')],
                    [27, 26, 29, ('H2', 'C2', 'C2')], [28, 26, 29, ('H2', 'C2', 'C2')],
                    [26, 29, 30, ('C2', 'C2', 'H2')], [26, 29, 31, ('C2', 'C2', 'H2')],
                    [26, 29, 32, ('C2', 'C2', 'O')], [30, 29, 31, ('H2', 'C2', 'H2')],
                    [30, 29, 32, ('H2', 'C2', 'O')], [31, 29, 32, ('H2', 'C2', 'O')],
                    [29, 32, 33, ('C2', 'O', 'C2')], [32, 33, 34, ('O', 'C2', 'H2')],
                    [32, 33, 35, ('O', 'C2', 'H2')], [32, 33, 36, ('O', 'C2', 'C2')],
                    [34, 33, 35, ('H2', 'C2', 'H2')], [34, 33, 36, ('H2', 'C2', 'C2')],
                    [35, 33, 36, ('H2', 'C2', 'C2')], [33, 36, 37, ('C2', 'C2', 'H2')],
                    [33, 36, 38, ('C2', 'C2', 'H2')], [33, 36, 39, ('C2', 'C2', 'O')],
                    [37, 36, 38, ('H2', 'C2', 'H2')], [37, 36, 39, ('H2', 'C2', 'O')],
                    [38, 36, 39, ('H2', 'C2', 'O')], [36, 39, 40, ('C2', 'O', 'C2')],
                    [39, 40, 41, ('O', 'C2', 'H2')], [39, 40, 42, ('O', 'C2', 'H2')],
                    [39, 40, 43, ('O', 'C2', 'C2')], [41, 40, 42, ('H2', 'C2', 'H2')],
                    [41, 40, 43, ('H2', 'C2', 'C2')], [42, 40, 43, ('H2', 'C2', 'C2')],
                    [40, 43, 44, ('C2', 'C2', 'H2')], [40, 43, 45, ('C2', 'C2', 'H2')],
                    [40, 43, 46, ('C2', 'C2', 'O')], [44, 43, 45, ('H2', 'C2', 'H2')],
                    [44, 43, 46, ('H2', 'C2', 'O')], [45, 43, 46, ('H2', 'C2', 'O')],
                    [43, 46, 47, ('C2', 'O', 'C2')], [46, 47, 48, ('O', 'C2', 'H2')],
                    [46, 47, 49, ('O', 'C2', 'H2')], [46, 47, 50, ('O', 'C2', 'C2')],
                    [48, 47, 49, ('H2', 'C2', 'H2')], [48, 47, 50, ('H2', 'C2', 'C2')],
                    [49, 47, 50, ('H2', 'C2', 'C2')], [47, 50, 51, ('C2', 'C2', 'H2')],
                    [47, 50, 52, ('C2', 'C2', 'H2')], [47, 50, 53, ('C2', 'C2', 'O')],
                    [51, 50, 52, ('H2', 'C2', 'H2')], [51, 50, 53, ('H2', 'C2', 'O')],
                    [52, 50, 53, ('H2', 'C2', 'O')], [50, 53, 54, ('C2', 'O', 'C2')],
                    [53, 54, 55, ('O', 'C2', 'H2')], [53, 54, 56, ('O', 'C2', 'H2')],
                    [53, 54, 57, ('O', 'C2', 'C2')], [55, 54, 56, ('H2', 'C2', 'H2')],
                    [55, 54, 57, ('H2', 'C2', 'C2')], [56, 54, 57, ('H2', 'C2', 'C2')],
                    [54, 57, 58, ('C2', 'C2', 'H2')], [54, 57, 59, ('C2', 'C2', 'H2')],
                    [54, 57, 60, ('C2', 'C2', 'O')], [58, 57, 59, ('H2', 'C2', 'H2')],
                    [58, 57, 60, ('H2', 'C2', 'O')], [59, 57, 60, ('H2', 'C2', 'O')],
                    [57, 60, 61, ('C2', 'O', 'C2')], [60, 61, 62, ('O', 'C2', 'H2')],
                    [60, 61, 63, ('O', 'C2', 'H2')], [60, 61, 64, ('O', 'C2', 'C2')],
                    [62, 61, 63, ('H2', 'C2', 'H2')], [62, 61, 64, ('H2', 'C2', 'C2')],
                    [63, 61, 64, ('H2', 'C2', 'C2')], [61, 64, 65, ('C2', 'C2', 'H2')],
                    [61, 64, 66, ('C2', 'C2', 'H2')], [61, 64, 67, ('C2', 'C2', 'O')],
                    [65, 64, 66, ('H2', 'C2', 'H2')], [65, 64, 67, ('H2', 'C2', 'O')],
                    [66, 64, 67, ('H2', 'C2', 'O')], [64, 67, 68, ('C2', 'O', 'C3')],
                    [67, 68, 69, ('O', 'C3', 'H3')], [67, 68, 70, ('O', 'C3', 'H3')],
                    [67, 68, 71, ('O', 'C3', 'H3')], [69, 68, 70, ('H3', 'C3', 'H3')],
                    [69, 68, 71, ('H3', 'C3', 'H3')], [70, 68, 71, ('H3', 'C3', 'H3')]])
        tdihedrals = [[1, 0, 4, 5, ('H3', 'C3', 'O', 'C2')], [2, 0, 4, 5, ('H3', 'C3', 'O', 'C2')], [3, 0, 4, 5, ('H3', 'C3', 'O', 'C2')],
                        [0, 4, 5, 6, ('C3', 'O', 'C2', 'H2')], [0, 4, 5, 7, ('C3', 'O', 'C2', 'H2')], [0, 4, 5, 8, ('C3', 'O', 'C2', 'C2')],
                        [4, 5, 8, 9, ('O', 'C2', 'C2', 'H2')], [4, 5, 8, 10, ('O', 'C2', 'C2', 'H2')], [4, 5, 8, 11, ('O', 'C2', 'C2', 'O')],
                        [6, 5, 8, 9, ('H2', 'C2', 'C2', 'H2')], [6, 5, 8, 10, ('H2', 'C2', 'C2', 'H2')], [6, 5, 8, 11, ('H2', 'C2', 'C2', 'O')],
                        [7, 5, 8, 9, ('H2', 'C2', 'C2', 'H2')], [7, 5, 8, 10, ('H2', 'C2', 'C2', 'H2')], [7, 5, 8, 11, ('H2', 'C2', 'C2', 'O')],
                        [5, 8, 11, 12, ('C2', 'C2', 'O', 'C2')], [9, 8, 11, 12, ('H2', 'C2', 'O', 'C2')], [10, 8, 11, 12, ('H2', 'C2', 'O', 'C2')],
                        [8, 11, 12, 13, ('C2', 'O', 'C2', 'H2')], [8, 11, 12, 14, ('C2', 'O', 'C2', 'H2')], [8, 11, 12, 15, ('C2', 'O', 'C2', 'C2')],
                        [11, 12, 15, 16, ('O', 'C2', 'C2', 'H2')], [11, 12, 15, 17, ('O', 'C2', 'C2', 'H2')], [11, 12, 15, 18, ('O', 'C2', 'C2', 'O')],
                        [13, 12, 15, 16, ('H2', 'C2', 'C2', 'H2')], [13, 12, 15, 17, ('H2', 'C2', 'C2', 'H2')], [13, 12, 15, 18, ('H2', 'C2', 'C2', 'O')],
                        [14, 12, 15, 16, ('H2', 'C2', 'C2', 'H2')], [14, 12, 15, 17, ('H2', 'C2', 'C2', 'H2')], [14, 12, 15, 18, ('H2', 'C2', 'C2', 'O')],
                        [12, 15, 18, 19, ('C2', 'C2', 'O', 'C2')], [16, 15, 18, 19, ('H2', 'C2', 'O', 'C2')], [17, 15, 18, 19, ('H2', 'C2', 'O', 'C2')],
                        [15, 18, 19, 20, ('C2', 'O', 'C2', 'H2')], [15, 18, 19, 21, ('C2', 'O', 'C2', 'H2')], [15, 18, 19, 22, ('C2', 'O', 'C2', 'C2')],
                        [18, 19, 22, 23, ('O', 'C2', 'C2', 'H2')], [18, 19, 22, 24, ('O', 'C2', 'C2', 'H2')], [18, 19, 22, 25, ('O', 'C2', 'C2', 'O')],
                        [20, 19, 22, 23, ('H2', 'C2', 'C2', 'H2')], [20, 19, 22, 24, ('H2', 'C2', 'C2', 'H2')], [20, 19, 22, 25, ('H2', 'C2', 'C2', 'O')],
                        [21, 19, 22, 23, ('H2', 'C2', 'C2', 'H2')], [21, 19, 22, 24, ('H2', 'C2', 'C2', 'H2')], [21, 19, 22, 25, ('H2', 'C2', 'C2', 'O')],
                        [19, 22, 25, 26, ('C2', 'C2', 'O', 'C2')], [23, 22, 25, 26, ('H2', 'C2', 'O', 'C2')], [24, 22, 25, 26, ('H2', 'C2', 'O', 'C2')],
                        [22, 25, 26, 27, ('C2', 'O', 'C2', 'H2')], [22, 25, 26, 28, ('C2', 'O', 'C2', 'H2')], [22, 25, 26, 29, ('C2', 'O', 'C2', 'C2')],
                        [25, 26, 29, 30, ('O', 'C2', 'C2', 'H2')], [25, 26, 29, 31, ('O', 'C2', 'C2', 'H2')], [25, 26, 29, 32, ('O', 'C2', 'C2', 'O')],
                        [27, 26, 29, 30, ('H2', 'C2', 'C2', 'H2')], [27, 26, 29, 31, ('H2', 'C2', 'C2', 'H2')], [27, 26, 29, 32, ('H2', 'C2', 'C2', 'O')],
                        [28, 26, 29, 30, ('H2', 'C2', 'C2', 'H2')], [28, 26, 29, 31, ('H2', 'C2', 'C2', 'H2')], [28, 26, 29, 32, ('H2', 'C2', 'C2', 'O')],
                        [26, 29, 32, 33, ('C2', 'C2', 'O', 'C2')], [30, 29, 32, 33, ('H2', 'C2', 'O', 'C2')], [31, 29, 32, 33, ('H2', 'C2', 'O', 'C2')],
                        [29, 32, 33, 34, ('C2', 'O', 'C2', 'H2')], [29, 32, 33, 35, ('C2', 'O', 'C2', 'H2')], [29, 32, 33, 36, ('C2', 'O', 'C2', 'C2')],
                        [32, 33, 36, 37, ('O', 'C2', 'C2', 'H2')], [32, 33, 36, 38, ('O', 'C2', 'C2', 'H2')], [32, 33, 36, 39, ('O', 'C2', 'C2', 'O')],
                        [34, 33, 36, 37, ('H2', 'C2', 'C2', 'H2')], [34, 33, 36, 38, ('H2', 'C2', 'C2', 'H2')], [34, 33, 36, 39, ('H2', 'C2', 'C2', 'O')],
                        [35, 33, 36, 37, ('H2', 'C2', 'C2', 'H2')], [35, 33, 36, 38, ('H2', 'C2', 'C2', 'H2')], [35, 33, 36, 39, ('H2', 'C2', 'C2', 'O')],
                        [33, 36, 39, 40, ('C2', 'C2', 'O', 'C2')], [37, 36, 39, 40, ('H2', 'C2', 'O', 'C2')], [38, 36, 39, 40, ('H2', 'C2', 'O', 'C2')],
                        [36, 39, 40, 41, ('C2', 'O', 'C2', 'H2')], [36, 39, 40, 42, ('C2', 'O', 'C2', 'H2')], [36, 39, 40, 43, ('C2', 'O', 'C2', 'C2')],
                        [39, 40, 43, 44, ('O', 'C2', 'C2', 'H2')], [39, 40, 43, 45, ('O', 'C2', 'C2', 'H2')], [39, 40, 43, 46, ('O', 'C2', 'C2', 'O')],
                        [41, 40, 43, 44, ('H2', 'C2', 'C2', 'H2')], [41, 40, 43, 45, ('H2', 'C2', 'C2', 'H2')], [41, 40, 43, 46, ('H2', 'C2', 'C2', 'O')],
                        [42, 40, 43, 44, ('H2', 'C2', 'C2', 'H2')], [42, 40, 43, 45, ('H2', 'C2', 'C2', 'H2')], [42, 40, 43, 46, ('H2', 'C2', 'C2', 'O')],
                        [40, 43, 46, 47, ('C2', 'C2', 'O', 'C2')], [44, 43, 46, 47, ('H2', 'C2', 'O', 'C2')], [45, 43, 46, 47, ('H2', 'C2', 'O', 'C2')],
                        [43, 46, 47, 48, ('C2', 'O', 'C2', 'H2')], [43, 46, 47, 49, ('C2', 'O', 'C2', 'H2')], [43, 46, 47, 50, ('C2', 'O', 'C2', 'C2')],
                        [46, 47, 50, 51, ('O', 'C2', 'C2', 'H2')], [46, 47, 50, 52, ('O', 'C2', 'C2', 'H2')], [46, 47, 50, 53, ('O', 'C2', 'C2', 'O')],
                        [48, 47, 50, 51, ('H2', 'C2', 'C2', 'H2')], [48, 47, 50, 52, ('H2', 'C2', 'C2', 'H2')], [48, 47, 50, 53, ('H2', 'C2', 'C2', 'O')],
                        [49, 47, 50, 51, ('H2', 'C2', 'C2', 'H2')], [49, 47, 50, 52, ('H2', 'C2', 'C2', 'H2')], [49, 47, 50, 53, ('H2', 'C2', 'C2', 'O')],
                        [47, 50, 53, 54, ('C2', 'C2', 'O', 'C2')], [51, 50, 53, 54, ('H2', 'C2', 'O', 'C2')], [52, 50, 53, 54, ('H2', 'C2', 'O', 'C2')],
                        [50, 53, 54, 55, ('C2', 'O', 'C2', 'H2')], [50, 53, 54, 56, ('C2', 'O', 'C2', 'H2')], [50, 53, 54, 57, ('C2', 'O', 'C2', 'C2')],
                        [53, 54, 57, 58, ('O', 'C2', 'C2', 'H2')], [53, 54, 57, 59, ('O', 'C2', 'C2', 'H2')], [53, 54, 57, 60, ('O', 'C2', 'C2', 'O')],
                        [55, 54, 57, 58, ('H2', 'C2', 'C2', 'H2')], [55, 54, 57, 59, ('H2', 'C2', 'C2', 'H2')], [55, 54, 57, 60, ('H2', 'C2', 'C2', 'O')],
                        [56, 54, 57, 58, ('H2', 'C2', 'C2', 'H2')], [56, 54, 57, 59, ('H2', 'C2', 'C2', 'H2')], [56, 54, 57, 60, ('H2', 'C2', 'C2', 'O')],
                        [54, 57, 60, 61, ('C2', 'C2', 'O', 'C2')], [58, 57, 60, 61, ('H2', 'C2', 'O', 'C2')], [59, 57, 60, 61, ('H2', 'C2', 'O', 'C2')],
                        [57, 60, 61, 62, ('C2', 'O', 'C2', 'H2')], [57, 60, 61, 63, ('C2', 'O', 'C2', 'H2')], [57, 60, 61, 64, ('C2', 'O', 'C2', 'C2')],
                        [60, 61, 64, 65, ('O', 'C2', 'C2', 'H2')], [60, 61, 64, 66, ('O', 'C2', 'C2', 'H2')], [60, 61, 64, 67, ('O', 'C2', 'C2', 'O')],
                        [62, 61, 64, 65, ('H2', 'C2', 'C2', 'H2')], [62, 61, 64, 66, ('H2', 'C2', 'C2', 'H2')], [62, 61, 64, 67, ('H2', 'C2', 'C2', 'O')],
                        [63, 61, 64, 65, ('H2', 'C2', 'C2', 'H2')], [63, 61, 64, 66, ('H2', 'C2', 'C2', 'H2')], [63, 61, 64, 67, ('H2', 'C2', 'C2', 'O')],
                        [61, 64, 67, 68, ('C2', 'C2', 'O', 'C3')], [65, 64, 67, 68, ('H2', 'C2', 'O', 'C3')], [66, 64, 67, 68, ('H2', 'C2', 'O', 'C3')],
                        [64, 67, 68, 69, ('C2', 'O', 'C3', 'H3')], [64, 67, 68, 70, ('C2', 'O', 'C3', 'H3')], [64, 67, 68, 71, ('C2', 'O', 'C3', 'H3')]]
        atoms = OrderedDict([("C2", "C"), ("C3","C"), ("H2", "H"), ("H3", "H"), ("O", "O")])
        bonds = OrderedDict([((u'C2', u'C2'), [222.5, 1.53]),
                             ((u'C2', u'H2'), [309.0, 1.111]),
                             ((u'C2', u'O'), [360.0, 1.415]),
                             ((u'C3', u'H3'), [322.0, 1.111]),
                             ((u'C3', u'O'), [360.0, 1.415])])
        pairs = OrderedDict([((u'C', u'C'), [-0.056, 2.01, -0.01, 1.9]),
                             ((u'H', u'H'), [-0.035, 1.34]),
                             ((u'O', u'O'), [-0.1, 1.65])])
        angles = OrderedDict([((u'C2', u'C2', u'H2'), [26.5, 110.1]),
                              ((u'C2', u'C2', u'O'), [45.0, 111.5]),
                              ((u'C2', u'O', u'C2'), [95.0, 109.7]),
                              ((u'C3', u'O', u'C2'), [95.0, 109.7]),
                              ((u'H2', u'C2', u'H2'), [35.5, 109.0]),
                              ((u'H2', u'C2', u'O'), [60.0, 109.5]),
                              ((u'H3', u'C3', u'H3'), [35.5, 108.4]),
                              ((u'H3', u'C3', u'O'), [60.0, 109.5])])
        dihedrals = OrderedDict([((u'C2', u'C2', u'O', u'C2'), [0.57, 1, 0, 0.0]),
                                 ((u'C2', u'O', u'C2', u'H2'), [0.284, 3, 0, 0.0]),
                                 ((u'C2', u'O', u'C3', u'H3'), [0.284, 3, 0, 0.0]),
                                 ((u'C3', u'O', u'C2', u'C2'), [0.57, 1, 0, 0.0]),
                                 ((u'H2', u'C2', u'C2', u'H2'), [0.19, 3, 0, 0.0]),
                                 ((u'H2', u'C2', u'O', u'C3'), [0.284, 3, 0, 0.0]),
                                 ((u'H2', u'O', u'C2', u'H2'), [0.284, 3, 0, 0.0]),
                                 ((u'H3', u'O', u'C3', u'H3'), [0.284, 3, 0, 0.0]),
                                 ((u'O', u'C2', u'C2', u'H2'), [0.19, 3, 0, 0.0]),
                                 ((u'O', u'C2', u'C2', u'O'), [1.16, 2, 0, 0.0])])
        #check atoms
        self.assertEqual(tatoms, self.topology.atoms)
        #check pairs
        #self.assertEqual(pairs, self.forcefield.pairs)
        #check bonds
        self.assertEqual(bonds, self.forcefield.bonds)
        self.assertEqual(tbonds, self.topology.bonds)
        #check angles
        self.assertEqual(angles, self.forcefield.angles)
        # TODO: fix this
        print(type(tangles))
        print(type(self.topology.angles))
        self.assertEqual(tangles, self.topology.angles)
        #check dihedrals
        self.assertEqual(dihedrals, self.forcefield.dihedrals)
        # TODO: fix this
        self.assertEqual(tdihedrals, self.topology.dihedrals)

    def tearDown(self):
        for x in ["lammps_ff_data.dat"]:
            if os.path.exists(os.path.join(test_dir, x)):
                os.remove(os.path.join(test_dir, x))


if __name__ == "__main__":
    unittest.main()
